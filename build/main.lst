ARM GAS  /tmp/ccPaG5uc.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB71:
  25              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
ARM GAS  /tmp/ccPaG5uc.s 			page 2


  34:Core/Src/main.c **** /* USER CODE END PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PM */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* USER CODE END PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  42:Core/Src/main.c **** SPI_HandleTypeDef hspi1;
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  45:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** UART_HandleTypeDef huart2;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE BEGIN PV */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE END PV */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  54:Core/Src/main.c **** void SystemClock_Config(void);
  55:Core/Src/main.c **** static void MX_GPIO_Init(void);
  56:Core/Src/main.c **** static void MX_SPI1_Init(void);
  57:Core/Src/main.c **** static void MX_TIM1_Init(void);
  58:Core/Src/main.c **** static void MX_TIM2_Init(void);
  59:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  60:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE END PFP */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  65:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* USER CODE END 0 */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /**
  70:Core/Src/main.c ****   * @brief  The application entry point.
  71:Core/Src/main.c ****   * @retval int
  72:Core/Src/main.c ****   */
  73:Core/Src/main.c **** int main(void)
  74:Core/Src/main.c **** {
  75:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c ****   /* USER CODE END 1 */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  82:Core/Src/main.c ****   HAL_Init();
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE END Init */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* Configure the system clock */
  89:Core/Src/main.c ****   SystemClock_Config();
  90:Core/Src/main.c **** 
ARM GAS  /tmp/ccPaG5uc.s 			page 3


  91:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE END SysInit */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* Initialize all configured peripherals */
  96:Core/Src/main.c ****   MX_GPIO_Init();
  97:Core/Src/main.c ****   //MX_SPI1_Init();
  98:Core/Src/main.c ****   //MX_TIM1_Init();
  99:Core/Src/main.c ****   //MX_TIM2_Init();
 100:Core/Src/main.c ****   MX_USART2_UART_Init();
 101:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   uint8_t counter = 0;
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   uint8_t buffer[]="hello world \r\n";
 106:Core/Src/main.c ****   #define BUFFER              buffer
 107:Core/Src/main.c ****   #define LEN_BUFFER          strlen(BUFFER)
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   HAL_GPIO_TogglePin(LED_PIN_GPIO_Port,LED_PIN_Pin);
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* USER CODE END 2 */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* Infinite loop */
 117:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 118:Core/Src/main.c ****   while (1)
 119:Core/Src/main.c ****   {
 120:Core/Src/main.c ****     /* USER CODE END WHILE */
 121:Core/Src/main.c ****     HAL_Delay(2000);
 122:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,BUFFER,LEN_BUFFER,1000);
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** 
 125:Core/Src/main.c **** 
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****     if(counter == 5){
 128:Core/Src/main.c ****       // mando a dormir
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,"sleep mode: on\r\n",strlen("sleep mode: on\r\n"),1000);
 131:Core/Src/main.c **** 
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****     HAL_UART_DeInit(&huart2) ;
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****     HAL_SuspendTick();
 136:Core/Src/main.c ****     HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 137:Core/Src/main.c ****     HAL_UART_Init(&huart2) ;
 138:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,"--sleep--\r\n",strlen("--sleep--\r\n"),1000);
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****     }
 141:Core/Src/main.c ****     
 142:Core/Src/main.c ****     counter ++;
 143:Core/Src/main.c ****     
 144:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 145:Core/Src/main.c ****   }
 146:Core/Src/main.c ****   /* USER CODE END 3 */
 147:Core/Src/main.c **** }
ARM GAS  /tmp/ccPaG5uc.s 			page 4


 148:Core/Src/main.c **** 
 149:Core/Src/main.c **** /**
 150:Core/Src/main.c ****   * @brief System Clock Configuration
 151:Core/Src/main.c ****   * @retval None
 152:Core/Src/main.c ****   */
 153:Core/Src/main.c **** void SystemClock_Config(void)
 154:Core/Src/main.c **** {
 155:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 156:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 159:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 160:Core/Src/main.c ****   */
 161:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 162:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 163:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 164:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 165:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 166:Core/Src/main.c ****   {
 167:Core/Src/main.c ****     Error_Handler();
 168:Core/Src/main.c ****   }
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 171:Core/Src/main.c ****   */
 172:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 173:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 174:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 175:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;//RCC_SYSCLK_DIV8;
 176:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 177:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 180:Core/Src/main.c ****   {
 181:Core/Src/main.c ****     Error_Handler();
 182:Core/Src/main.c ****   }
 183:Core/Src/main.c **** }
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** /**
 186:Core/Src/main.c ****   * @brief SPI1 Initialization Function
 187:Core/Src/main.c ****   * @param None
 188:Core/Src/main.c ****   * @retval None
 189:Core/Src/main.c ****   */
 190:Core/Src/main.c **** static void MX_SPI1_Init(void)
 191:Core/Src/main.c **** {
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 0 */
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   /* USER CODE END SPI1_Init 0 */
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 1 */
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****   /* USER CODE END SPI1_Init 1 */
 200:Core/Src/main.c ****   /* SPI1 parameter configuration*/
 201:Core/Src/main.c ****   hspi1.Instance = SPI1;
 202:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 203:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 204:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
ARM GAS  /tmp/ccPaG5uc.s 			page 5


 205:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 206:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 207:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 208:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 209:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 210:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 211:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 212:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 213:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 214:Core/Src/main.c ****   {
 215:Core/Src/main.c ****     Error_Handler();
 216:Core/Src/main.c ****   }
 217:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 2 */
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* USER CODE END SPI1_Init 2 */
 220:Core/Src/main.c **** 
 221:Core/Src/main.c **** }
 222:Core/Src/main.c **** 
 223:Core/Src/main.c **** /**
 224:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 225:Core/Src/main.c ****   * @param None
 226:Core/Src/main.c ****   * @retval None
 227:Core/Src/main.c ****   */
 228:Core/Src/main.c **** static void MX_TIM1_Init(void)
 229:Core/Src/main.c **** {
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 234:Core/Src/main.c **** 
 235:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 236:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 241:Core/Src/main.c ****   htim1.Instance = TIM1;
 242:Core/Src/main.c ****   htim1.Init.Prescaler = 1000;
 243:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 244:Core/Src/main.c ****   htim1.Init.Period = 1000;
 245:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 246:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 247:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 248:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 249:Core/Src/main.c ****   {
 250:Core/Src/main.c ****     Error_Handler();
 251:Core/Src/main.c ****   }
 252:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 253:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 254:Core/Src/main.c ****   {
 255:Core/Src/main.c ****     Error_Handler();
 256:Core/Src/main.c ****   }
 257:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 258:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 259:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 260:Core/Src/main.c ****   {
 261:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccPaG5uc.s 			page 6


 262:Core/Src/main.c ****   }
 263:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 266:Core/Src/main.c **** 
 267:Core/Src/main.c **** }
 268:Core/Src/main.c **** 
 269:Core/Src/main.c **** /**
 270:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 271:Core/Src/main.c ****   * @param None
 272:Core/Src/main.c ****   * @retval None
 273:Core/Src/main.c ****   */
 274:Core/Src/main.c **** static void MX_TIM2_Init(void)
 275:Core/Src/main.c **** {
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 280:Core/Src/main.c **** 
 281:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 282:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 285:Core/Src/main.c **** 
 286:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 287:Core/Src/main.c ****   htim2.Instance = TIM2;
 288:Core/Src/main.c ****   htim2.Init.Prescaler = 1000;
 289:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 290:Core/Src/main.c ****   htim2.Init.Period = 1000;
 291:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 292:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 293:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 294:Core/Src/main.c ****   {
 295:Core/Src/main.c ****     Error_Handler();
 296:Core/Src/main.c ****   }
 297:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 298:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 299:Core/Src/main.c ****   {
 300:Core/Src/main.c ****     Error_Handler();
 301:Core/Src/main.c ****   }
 302:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 303:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 304:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 305:Core/Src/main.c ****   {
 306:Core/Src/main.c ****     Error_Handler();
 307:Core/Src/main.c ****   }
 308:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 311:Core/Src/main.c **** 
 312:Core/Src/main.c **** }
 313:Core/Src/main.c **** 
 314:Core/Src/main.c **** /**
 315:Core/Src/main.c ****   * @brief USART2 Initialization Function
 316:Core/Src/main.c ****   * @param None
 317:Core/Src/main.c ****   * @retval None
 318:Core/Src/main.c ****   */
ARM GAS  /tmp/ccPaG5uc.s 			page 7


 319:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 320:Core/Src/main.c **** {
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 327:Core/Src/main.c **** 
 328:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 329:Core/Src/main.c ****   huart2.Instance = USART2;
 330:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;//19200;
 331:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 332:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 333:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 334:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 335:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 336:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 337:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 338:Core/Src/main.c ****   {
 339:Core/Src/main.c ****     Error_Handler();
 340:Core/Src/main.c ****   }
 341:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 342:Core/Src/main.c **** 
 343:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 344:Core/Src/main.c **** 
 345:Core/Src/main.c **** }
 346:Core/Src/main.c **** 
 347:Core/Src/main.c **** /**
 348:Core/Src/main.c ****   * @brief GPIO Initialization Function
 349:Core/Src/main.c ****   * @param None
 350:Core/Src/main.c ****   * @retval None
 351:Core/Src/main.c ****   */
 352:Core/Src/main.c **** static void MX_GPIO_Init(void)
 353:Core/Src/main.c **** {
  26              		.loc 1 353 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 30B5     		push	{r4, r5, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 5, -8
  35              		.cfi_offset 14, -4
  36 0002 87B0     		sub	sp, sp, #28
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 40
 354:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 354 3 view .LVU1
  40              		.loc 1 354 20 is_stmt 0 view .LVU2
  41 0004 0024     		movs	r4, #0
  42 0006 0294     		str	r4, [sp, #8]
  43 0008 0394     		str	r4, [sp, #12]
  44 000a 0494     		str	r4, [sp, #16]
  45 000c 0594     		str	r4, [sp, #20]
 355:Core/Src/main.c **** 
ARM GAS  /tmp/ccPaG5uc.s 			page 8


 356:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 357:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  46              		.loc 1 357 3 is_stmt 1 view .LVU3
  47              	.LBB4:
  48              		.loc 1 357 3 view .LVU4
  49              		.loc 1 357 3 view .LVU5
  50 000e 184B     		ldr	r3, .L3
  51 0010 9A69     		ldr	r2, [r3, #24]
  52 0012 42F00402 		orr	r2, r2, #4
  53 0016 9A61     		str	r2, [r3, #24]
  54              		.loc 1 357 3 view .LVU6
  55 0018 9A69     		ldr	r2, [r3, #24]
  56 001a 02F00402 		and	r2, r2, #4
  57 001e 0092     		str	r2, [sp]
  58              		.loc 1 357 3 view .LVU7
  59 0020 009A     		ldr	r2, [sp]
  60              	.LBE4:
  61              		.loc 1 357 3 view .LVU8
 358:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  62              		.loc 1 358 3 view .LVU9
  63              	.LBB5:
  64              		.loc 1 358 3 view .LVU10
  65              		.loc 1 358 3 view .LVU11
  66 0022 9A69     		ldr	r2, [r3, #24]
  67 0024 42F00802 		orr	r2, r2, #8
  68 0028 9A61     		str	r2, [r3, #24]
  69              		.loc 1 358 3 view .LVU12
  70 002a 9B69     		ldr	r3, [r3, #24]
  71 002c 03F00803 		and	r3, r3, #8
  72 0030 0193     		str	r3, [sp, #4]
  73              		.loc 1 358 3 view .LVU13
  74 0032 019B     		ldr	r3, [sp, #4]
  75              	.LBE5:
  76              		.loc 1 358 3 view .LVU14
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 361:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
  77              		.loc 1 361 3 view .LVU15
  78 0034 0F4D     		ldr	r5, .L3+4
  79 0036 2246     		mov	r2, r4
  80 0038 0421     		movs	r1, #4
  81 003a 2846     		mov	r0, r5
  82 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
  83              	.LVL0:
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   /*Configure GPIO pin : PB2 */
 364:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
  84              		.loc 1 364 3 view .LVU16
  85              		.loc 1 364 23 is_stmt 0 view .LVU17
  86 0040 0423     		movs	r3, #4
  87 0042 0293     		str	r3, [sp, #8]
 365:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  88              		.loc 1 365 3 is_stmt 1 view .LVU18
  89              		.loc 1 365 24 is_stmt 0 view .LVU19
  90 0044 0123     		movs	r3, #1
  91 0046 0393     		str	r3, [sp, #12]
 366:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
ARM GAS  /tmp/ccPaG5uc.s 			page 9


  92              		.loc 1 366 3 is_stmt 1 view .LVU20
  93              		.loc 1 366 24 is_stmt 0 view .LVU21
  94 0048 0494     		str	r4, [sp, #16]
 367:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  95              		.loc 1 367 3 is_stmt 1 view .LVU22
  96              		.loc 1 367 25 is_stmt 0 view .LVU23
  97 004a 0223     		movs	r3, #2
  98 004c 0593     		str	r3, [sp, #20]
 368:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  99              		.loc 1 368 3 is_stmt 1 view .LVU24
 100 004e 02A9     		add	r1, sp, #8
 101 0050 2846     		mov	r0, r5
 102 0052 FFF7FEFF 		bl	HAL_GPIO_Init
 103              	.LVL1:
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   /*Configure GPIO pin : PA15 */
 371:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_15;
 104              		.loc 1 371 3 view .LVU25
 105              		.loc 1 371 23 is_stmt 0 view .LVU26
 106 0056 4FF40043 		mov	r3, #32768
 107 005a 0293     		str	r3, [sp, #8]
 372:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 108              		.loc 1 372 3 is_stmt 1 view .LVU27
 109              		.loc 1 372 24 is_stmt 0 view .LVU28
 110 005c 064B     		ldr	r3, .L3+8
 111 005e 0393     		str	r3, [sp, #12]
 373:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 112              		.loc 1 373 3 is_stmt 1 view .LVU29
 113              		.loc 1 373 24 is_stmt 0 view .LVU30
 114 0060 0494     		str	r4, [sp, #16]
 374:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 115              		.loc 1 374 3 is_stmt 1 view .LVU31
 116 0062 02A9     		add	r1, sp, #8
 117 0064 0548     		ldr	r0, .L3+12
 118 0066 FFF7FEFF 		bl	HAL_GPIO_Init
 119              	.LVL2:
 375:Core/Src/main.c **** 
 376:Core/Src/main.c **** }
 120              		.loc 1 376 1 is_stmt 0 view .LVU32
 121 006a 07B0     		add	sp, sp, #28
 122              	.LCFI2:
 123              		.cfi_def_cfa_offset 12
 124              		@ sp needed
 125 006c 30BD     		pop	{r4, r5, pc}
 126              	.L4:
 127 006e 00BF     		.align	2
 128              	.L3:
 129 0070 00100240 		.word	1073876992
 130 0074 000C0140 		.word	1073810432
 131 0078 00001110 		.word	269549568
 132 007c 00080140 		.word	1073809408
 133              		.cfi_endproc
 134              	.LFE71:
 136              		.section	.text.Error_Handler,"ax",%progbits
 137              		.align	1
 138              		.global	Error_Handler
 139              		.syntax unified
ARM GAS  /tmp/ccPaG5uc.s 			page 10


 140              		.thumb
 141              		.thumb_func
 142              		.fpu softvfp
 144              	Error_Handler:
 145              	.LFB72:
 377:Core/Src/main.c **** 
 378:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 379:Core/Src/main.c **** 
 380:Core/Src/main.c **** /* USER CODE END 4 */
 381:Core/Src/main.c **** 
 382:Core/Src/main.c **** /**
 383:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 384:Core/Src/main.c ****   * @retval None
 385:Core/Src/main.c ****   */
 386:Core/Src/main.c **** void Error_Handler(void)
 387:Core/Src/main.c **** {
 146              		.loc 1 387 1 is_stmt 1 view -0
 147              		.cfi_startproc
 148              		@ Volatile: function does not return.
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              		@ link register save eliminated.
 388:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 389:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 390:Core/Src/main.c ****   __disable_irq();
 152              		.loc 1 390 3 view .LVU34
 153              	.LBB6:
 154              	.LBI6:
 155              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
ARM GAS  /tmp/ccPaG5uc.s 			page 11


  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccPaG5uc.s 			page 12


  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 156              		.loc 2 140 27 view .LVU35
 157              	.LBB7:
ARM GAS  /tmp/ccPaG5uc.s 			page 13


 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 158              		.loc 2 142 3 view .LVU36
 159              		.syntax unified
 160              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 161 0000 72B6     		cpsid i
 162              	@ 0 "" 2
 163              		.thumb
 164              		.syntax unified
 165              	.L6:
 166              	.LBE7:
 167              	.LBE6:
 391:Core/Src/main.c ****   while (1)
 168              		.loc 1 391 3 discriminator 1 view .LVU37
 392:Core/Src/main.c ****   {
 393:Core/Src/main.c ****   }
 169              		.loc 1 393 3 discriminator 1 view .LVU38
 391:Core/Src/main.c ****   while (1)
 170              		.loc 1 391 9 discriminator 1 view .LVU39
 171 0002 FEE7     		b	.L6
 172              		.cfi_endproc
 173              	.LFE72:
 175              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 176              		.align	1
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 180              		.fpu softvfp
 182              	MX_USART2_UART_Init:
 183              	.LFB70:
 320:Core/Src/main.c **** 
 184              		.loc 1 320 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188 0000 08B5     		push	{r3, lr}
 189              	.LCFI3:
 190              		.cfi_def_cfa_offset 8
 191              		.cfi_offset 3, -8
 192              		.cfi_offset 14, -4
 329:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;//19200;
 193              		.loc 1 329 3 view .LVU41
 329:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;//19200;
 194              		.loc 1 329 19 is_stmt 0 view .LVU42
 195 0002 0A48     		ldr	r0, .L11
 196 0004 0A4B     		ldr	r3, .L11+4
 197 0006 0360     		str	r3, [r0]
 330:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 198              		.loc 1 330 3 is_stmt 1 view .LVU43
 330:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 199              		.loc 1 330 24 is_stmt 0 view .LVU44
 200 0008 4FF4E133 		mov	r3, #115200
 201 000c 4360     		str	r3, [r0, #4]
 331:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 202              		.loc 1 331 3 is_stmt 1 view .LVU45
 331:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 203              		.loc 1 331 26 is_stmt 0 view .LVU46
ARM GAS  /tmp/ccPaG5uc.s 			page 14


 204 000e 0023     		movs	r3, #0
 205 0010 8360     		str	r3, [r0, #8]
 332:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 206              		.loc 1 332 3 is_stmt 1 view .LVU47
 332:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 207              		.loc 1 332 24 is_stmt 0 view .LVU48
 208 0012 C360     		str	r3, [r0, #12]
 333:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 209              		.loc 1 333 3 is_stmt 1 view .LVU49
 333:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 210              		.loc 1 333 22 is_stmt 0 view .LVU50
 211 0014 0361     		str	r3, [r0, #16]
 334:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 212              		.loc 1 334 3 is_stmt 1 view .LVU51
 334:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 213              		.loc 1 334 20 is_stmt 0 view .LVU52
 214 0016 0C22     		movs	r2, #12
 215 0018 4261     		str	r2, [r0, #20]
 335:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 216              		.loc 1 335 3 is_stmt 1 view .LVU53
 335:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 217              		.loc 1 335 25 is_stmt 0 view .LVU54
 218 001a 8361     		str	r3, [r0, #24]
 336:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 219              		.loc 1 336 3 is_stmt 1 view .LVU55
 336:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 220              		.loc 1 336 28 is_stmt 0 view .LVU56
 221 001c C361     		str	r3, [r0, #28]
 337:Core/Src/main.c ****   {
 222              		.loc 1 337 3 is_stmt 1 view .LVU57
 337:Core/Src/main.c ****   {
 223              		.loc 1 337 7 is_stmt 0 view .LVU58
 224 001e FFF7FEFF 		bl	HAL_UART_Init
 225              	.LVL3:
 337:Core/Src/main.c ****   {
 226              		.loc 1 337 6 view .LVU59
 227 0022 00B9     		cbnz	r0, .L10
 345:Core/Src/main.c **** 
 228              		.loc 1 345 1 view .LVU60
 229 0024 08BD     		pop	{r3, pc}
 230              	.L10:
 339:Core/Src/main.c ****   }
 231              		.loc 1 339 5 is_stmt 1 view .LVU61
 232 0026 FFF7FEFF 		bl	Error_Handler
 233              	.LVL4:
 234              	.L12:
 235 002a 00BF     		.align	2
 236              	.L11:
 237 002c 00000000 		.word	.LANCHOR0
 238 0030 00440040 		.word	1073759232
 239              		.cfi_endproc
 240              	.LFE70:
 242              		.section	.text.SystemClock_Config,"ax",%progbits
 243              		.align	1
 244              		.global	SystemClock_Config
 245              		.syntax unified
 246              		.thumb
ARM GAS  /tmp/ccPaG5uc.s 			page 15


 247              		.thumb_func
 248              		.fpu softvfp
 250              	SystemClock_Config:
 251              	.LFB66:
 154:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 252              		.loc 1 154 1 view -0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 64
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256 0000 00B5     		push	{lr}
 257              	.LCFI4:
 258              		.cfi_def_cfa_offset 4
 259              		.cfi_offset 14, -4
 260 0002 91B0     		sub	sp, sp, #68
 261              	.LCFI5:
 262              		.cfi_def_cfa_offset 72
 155:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 263              		.loc 1 155 3 view .LVU63
 155:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 264              		.loc 1 155 22 is_stmt 0 view .LVU64
 265 0004 2822     		movs	r2, #40
 266 0006 0021     		movs	r1, #0
 267 0008 06A8     		add	r0, sp, #24
 268 000a FFF7FEFF 		bl	memset
 269              	.LVL5:
 156:Core/Src/main.c **** 
 270              		.loc 1 156 3 is_stmt 1 view .LVU65
 156:Core/Src/main.c **** 
 271              		.loc 1 156 22 is_stmt 0 view .LVU66
 272 000e 0023     		movs	r3, #0
 273 0010 0193     		str	r3, [sp, #4]
 274 0012 0293     		str	r3, [sp, #8]
 275 0014 0393     		str	r3, [sp, #12]
 276 0016 0493     		str	r3, [sp, #16]
 277 0018 0593     		str	r3, [sp, #20]
 161:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 278              		.loc 1 161 3 is_stmt 1 view .LVU67
 161:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 279              		.loc 1 161 36 is_stmt 0 view .LVU68
 280 001a 0223     		movs	r3, #2
 281 001c 0693     		str	r3, [sp, #24]
 162:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 282              		.loc 1 162 3 is_stmt 1 view .LVU69
 162:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 283              		.loc 1 162 30 is_stmt 0 view .LVU70
 284 001e 0123     		movs	r3, #1
 285 0020 0A93     		str	r3, [sp, #40]
 163:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 286              		.loc 1 163 3 is_stmt 1 view .LVU71
 163:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 287              		.loc 1 163 41 is_stmt 0 view .LVU72
 288 0022 1023     		movs	r3, #16
 289 0024 0B93     		str	r3, [sp, #44]
 164:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 290              		.loc 1 164 3 is_stmt 1 view .LVU73
 165:Core/Src/main.c ****   {
 291              		.loc 1 165 3 view .LVU74
ARM GAS  /tmp/ccPaG5uc.s 			page 16


 165:Core/Src/main.c ****   {
 292              		.loc 1 165 7 is_stmt 0 view .LVU75
 293 0026 06A8     		add	r0, sp, #24
 294 0028 FFF7FEFF 		bl	HAL_RCC_OscConfig
 295              	.LVL6:
 165:Core/Src/main.c ****   {
 296              		.loc 1 165 6 view .LVU76
 297 002c 70B9     		cbnz	r0, .L17
 172:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 298              		.loc 1 172 3 is_stmt 1 view .LVU77
 172:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 299              		.loc 1 172 31 is_stmt 0 view .LVU78
 300 002e 0F23     		movs	r3, #15
 301 0030 0193     		str	r3, [sp, #4]
 174:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;//RCC_SYSCLK_DIV8;
 302              		.loc 1 174 3 is_stmt 1 view .LVU79
 174:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;//RCC_SYSCLK_DIV8;
 303              		.loc 1 174 34 is_stmt 0 view .LVU80
 304 0032 0021     		movs	r1, #0
 305 0034 0291     		str	r1, [sp, #8]
 175:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 306              		.loc 1 175 3 is_stmt 1 view .LVU81
 175:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 307              		.loc 1 175 35 is_stmt 0 view .LVU82
 308 0036 8023     		movs	r3, #128
 309 0038 0393     		str	r3, [sp, #12]
 176:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 310              		.loc 1 176 3 is_stmt 1 view .LVU83
 176:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 311              		.loc 1 176 36 is_stmt 0 view .LVU84
 312 003a 0491     		str	r1, [sp, #16]
 177:Core/Src/main.c **** 
 313              		.loc 1 177 3 is_stmt 1 view .LVU85
 177:Core/Src/main.c **** 
 314              		.loc 1 177 36 is_stmt 0 view .LVU86
 315 003c 0591     		str	r1, [sp, #20]
 179:Core/Src/main.c ****   {
 316              		.loc 1 179 3 is_stmt 1 view .LVU87
 179:Core/Src/main.c ****   {
 317              		.loc 1 179 7 is_stmt 0 view .LVU88
 318 003e 01A8     		add	r0, sp, #4
 319 0040 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 320              	.LVL7:
 179:Core/Src/main.c ****   {
 321              		.loc 1 179 6 view .LVU89
 322 0044 20B9     		cbnz	r0, .L18
 183:Core/Src/main.c **** 
 323              		.loc 1 183 1 view .LVU90
 324 0046 11B0     		add	sp, sp, #68
 325              	.LCFI6:
 326              		.cfi_remember_state
 327              		.cfi_def_cfa_offset 4
 328              		@ sp needed
 329 0048 5DF804FB 		ldr	pc, [sp], #4
 330              	.L17:
 331              	.LCFI7:
 332              		.cfi_restore_state
ARM GAS  /tmp/ccPaG5uc.s 			page 17


 167:Core/Src/main.c ****   }
 333              		.loc 1 167 5 is_stmt 1 view .LVU91
 334 004c FFF7FEFF 		bl	Error_Handler
 335              	.LVL8:
 336              	.L18:
 181:Core/Src/main.c ****   }
 337              		.loc 1 181 5 view .LVU92
 338 0050 FFF7FEFF 		bl	Error_Handler
 339              	.LVL9:
 340              		.cfi_endproc
 341              	.LFE66:
 343              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 344              		.align	2
 345              	.LC1:
 346 0000 736C6565 		.ascii	"sleep mode: on\015\012\000"
 346      70206D6F 
 346      64653A20 
 346      6F6E0D0A 
 346      00
 347 0011 000000   		.align	2
 348              	.LC2:
 349 0014 2D2D736C 		.ascii	"--sleep--\015\012\000"
 349      6565702D 
 349      2D0D0A00 
 350              		.align	2
 351              	.LC0:
 352 0020 68656C6C 		.ascii	"hello world \015\012\000"
 352      6F20776F 
 352      726C6420 
 352      0D0A00
 353              		.section	.text.main,"ax",%progbits
 354              		.align	1
 355              		.global	main
 356              		.syntax unified
 357              		.thumb
 358              		.thumb_func
 359              		.fpu softvfp
 361              	main:
 362              	.LFB65:
  74:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 363              		.loc 1 74 1 view -0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 16
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 367 0000 30B5     		push	{r4, r5, lr}
 368              	.LCFI8:
 369              		.cfi_def_cfa_offset 12
 370              		.cfi_offset 4, -12
 371              		.cfi_offset 5, -8
 372              		.cfi_offset 14, -4
 373 0002 85B0     		sub	sp, sp, #20
 374              	.LCFI9:
 375              		.cfi_def_cfa_offset 32
  82:Core/Src/main.c **** 
 376              		.loc 1 82 3 view .LVU94
 377 0004 FFF7FEFF 		bl	HAL_Init
 378              	.LVL10:
ARM GAS  /tmp/ccPaG5uc.s 			page 18


  89:Core/Src/main.c **** 
 379              		.loc 1 89 3 view .LVU95
 380 0008 FFF7FEFF 		bl	SystemClock_Config
 381              	.LVL11:
  96:Core/Src/main.c ****   //MX_SPI1_Init();
 382              		.loc 1 96 3 view .LVU96
 383 000c FFF7FEFF 		bl	MX_GPIO_Init
 384              	.LVL12:
 100:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 385              		.loc 1 100 3 view .LVU97
 386 0010 FFF7FEFF 		bl	MX_USART2_UART_Init
 387              	.LVL13:
 103:Core/Src/main.c **** 
 388              		.loc 1 103 3 view .LVU98
 105:Core/Src/main.c ****   #define BUFFER              buffer
 389              		.loc 1 105 3 view .LVU99
 105:Core/Src/main.c ****   #define BUFFER              buffer
 390              		.loc 1 105 11 is_stmt 0 view .LVU100
 391 0014 1D4B     		ldr	r3, .L23
 392 0016 6C46     		mov	r4, sp
 393 0018 0FCB     		ldm	r3, {r0, r1, r2, r3}
 394 001a 07C4     		stmia	r4!, {r0, r1, r2}
 395 001c 24F8023B 		strh	r3, [r4], #2	@ movhi
 396 0020 1B0C     		lsrs	r3, r3, #16
 397 0022 2370     		strb	r3, [r4]
 110:Core/Src/main.c **** 
 398              		.loc 1 110 3 is_stmt 1 view .LVU101
 399 0024 0421     		movs	r1, #4
 400 0026 1A48     		ldr	r0, .L23+4
 401 0028 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 402              	.LVL14:
 103:Core/Src/main.c **** 
 403              		.loc 1 103 11 is_stmt 0 view .LVU102
 404 002c 0024     		movs	r4, #0
 405 002e 01E0     		b	.L21
 406              	.LVL15:
 407              	.L20:
 408              	.LBB8:
 142:Core/Src/main.c ****     
 409              		.loc 1 142 5 is_stmt 1 view .LVU103
 142:Core/Src/main.c ****     
 410              		.loc 1 142 13 is_stmt 0 view .LVU104
 411 0030 0134     		adds	r4, r4, #1
 412              	.LVL16:
 142:Core/Src/main.c ****     
 413              		.loc 1 142 13 view .LVU105
 414 0032 E4B2     		uxtb	r4, r4
 415              	.LVL17:
 142:Core/Src/main.c ****     
 416              		.loc 1 142 13 view .LVU106
 417              	.LBE8:
 118:Core/Src/main.c ****   {
 418              		.loc 1 118 9 is_stmt 1 view .LVU107
 419              	.L21:
 118:Core/Src/main.c ****   {
 420              		.loc 1 118 3 view .LVU108
 421              	.LBB9:
ARM GAS  /tmp/ccPaG5uc.s 			page 19


 121:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,BUFFER,LEN_BUFFER,1000);
 422              		.loc 1 121 5 view .LVU109
 423 0034 4FF4FA60 		mov	r0, #2000
 424 0038 FFF7FEFF 		bl	HAL_Delay
 425              	.LVL18:
 122:Core/Src/main.c **** 
 426              		.loc 1 122 5 view .LVU110
 122:Core/Src/main.c **** 
 427              		.loc 1 122 38 is_stmt 0 view .LVU111
 428 003c 6846     		mov	r0, sp
 429 003e FFF7FEFF 		bl	strlen
 430              	.LVL19:
 122:Core/Src/main.c **** 
 431              		.loc 1 122 5 view .LVU112
 432 0042 4FF47A73 		mov	r3, #1000
 433 0046 82B2     		uxth	r2, r0
 434 0048 6946     		mov	r1, sp
 435 004a 1248     		ldr	r0, .L23+8
 436 004c FFF7FEFF 		bl	HAL_UART_Transmit
 437              	.LVL20:
 127:Core/Src/main.c ****       // mando a dormir
 438              		.loc 1 127 5 is_stmt 1 view .LVU113
 127:Core/Src/main.c ****       // mando a dormir
 439              		.loc 1 127 7 is_stmt 0 view .LVU114
 440 0050 052C     		cmp	r4, #5
 441 0052 EDD1     		bne	.L20
 130:Core/Src/main.c **** 
 442              		.loc 1 130 5 is_stmt 1 view .LVU115
 443 0054 0F4D     		ldr	r5, .L23+8
 444 0056 4FF47A73 		mov	r3, #1000
 445 005a 1022     		movs	r2, #16
 446 005c 0E49     		ldr	r1, .L23+12
 447 005e 2846     		mov	r0, r5
 448 0060 FFF7FEFF 		bl	HAL_UART_Transmit
 449              	.LVL21:
 133:Core/Src/main.c **** 
 450              		.loc 1 133 5 view .LVU116
 451 0064 2846     		mov	r0, r5
 452 0066 FFF7FEFF 		bl	HAL_UART_DeInit
 453              	.LVL22:
 135:Core/Src/main.c ****     HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 454              		.loc 1 135 5 view .LVU117
 455 006a FFF7FEFF 		bl	HAL_SuspendTick
 456              	.LVL23:
 136:Core/Src/main.c ****     HAL_UART_Init(&huart2) ;
 457              		.loc 1 136 5 view .LVU118
 458 006e 0121     		movs	r1, #1
 459 0070 0020     		movs	r0, #0
 460 0072 FFF7FEFF 		bl	HAL_PWR_EnterSLEEPMode
 461              	.LVL24:
 137:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,"--sleep--\r\n",strlen("--sleep--\r\n"),1000);
 462              		.loc 1 137 5 view .LVU119
 463 0076 2846     		mov	r0, r5
 464 0078 FFF7FEFF 		bl	HAL_UART_Init
 465              	.LVL25:
 138:Core/Src/main.c **** 
 466              		.loc 1 138 5 view .LVU120
ARM GAS  /tmp/ccPaG5uc.s 			page 20


 467 007c 4FF47A73 		mov	r3, #1000
 468 0080 0B22     		movs	r2, #11
 469 0082 0649     		ldr	r1, .L23+16
 470 0084 2846     		mov	r0, r5
 471 0086 FFF7FEFF 		bl	HAL_UART_Transmit
 472              	.LVL26:
 473 008a D1E7     		b	.L20
 474              	.L24:
 475              		.align	2
 476              	.L23:
 477 008c 20000000 		.word	.LC0
 478 0090 000C0140 		.word	1073810432
 479 0094 00000000 		.word	.LANCHOR0
 480 0098 00000000 		.word	.LC1
 481 009c 14000000 		.word	.LC2
 482              	.LBE9:
 483              		.cfi_endproc
 484              	.LFE65:
 486              		.global	huart2
 487              		.global	htim2
 488              		.global	htim1
 489              		.global	hspi1
 490              		.section	.bss.hspi1,"aw",%nobits
 491              		.align	2
 494              	hspi1:
 495 0000 00000000 		.space	88
 495      00000000 
 495      00000000 
 495      00000000 
 495      00000000 
 496              		.section	.bss.htim1,"aw",%nobits
 497              		.align	2
 500              	htim1:
 501 0000 00000000 		.space	72
 501      00000000 
 501      00000000 
 501      00000000 
 501      00000000 
 502              		.section	.bss.htim2,"aw",%nobits
 503              		.align	2
 506              	htim2:
 507 0000 00000000 		.space	72
 507      00000000 
 507      00000000 
 507      00000000 
 507      00000000 
 508              		.section	.bss.huart2,"aw",%nobits
 509              		.align	2
 510              		.set	.LANCHOR0,. + 0
 513              	huart2:
 514 0000 00000000 		.space	68
 514      00000000 
 514      00000000 
 514      00000000 
 514      00000000 
 515              		.text
 516              	.Letext0:
ARM GAS  /tmp/ccPaG5uc.s 			page 21


 517              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 518              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 519              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 520              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 521              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 522              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 523              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 524              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 525              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 526              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 527              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 528              		.file 14 "<built-in>"
 529              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_pwr.h"
ARM GAS  /tmp/ccPaG5uc.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccPaG5uc.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccPaG5uc.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccPaG5uc.s:129    .text.MX_GPIO_Init:0000000000000070 $d
     /tmp/ccPaG5uc.s:137    .text.Error_Handler:0000000000000000 $t
     /tmp/ccPaG5uc.s:144    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccPaG5uc.s:176    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccPaG5uc.s:182    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccPaG5uc.s:237    .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/ccPaG5uc.s:243    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccPaG5uc.s:250    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccPaG5uc.s:344    .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccPaG5uc.s:354    .text.main:0000000000000000 $t
     /tmp/ccPaG5uc.s:361    .text.main:0000000000000000 main
     /tmp/ccPaG5uc.s:477    .text.main:000000000000008c $d
     /tmp/ccPaG5uc.s:513    .bss.huart2:0000000000000000 huart2
     /tmp/ccPaG5uc.s:506    .bss.htim2:0000000000000000 htim2
     /tmp/ccPaG5uc.s:500    .bss.htim1:0000000000000000 htim1
     /tmp/ccPaG5uc.s:494    .bss.hspi1:0000000000000000 hspi1
     /tmp/ccPaG5uc.s:491    .bss.hspi1:0000000000000000 $d
     /tmp/ccPaG5uc.s:497    .bss.htim1:0000000000000000 $d
     /tmp/ccPaG5uc.s:503    .bss.htim2:0000000000000000 $d
     /tmp/ccPaG5uc.s:509    .bss.huart2:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_GPIO_TogglePin
HAL_Delay
strlen
HAL_UART_Transmit
HAL_UART_DeInit
HAL_SuspendTick
HAL_PWR_EnterSLEEPMode
